!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR = ar rcs$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CallBackSearch	DoubleLink.c	/^int CallBackSearch(void *one, void *two, int flag)$/;"	f
CallBackSequence	DoubleLink.c	/^int CallBackSequence(DLNode *List, DLNode *p_one, DLNode *p_two, int flag, int judge)$/;"	f
CallBackShow	DoubleLink.c	/^int CallBackShow(void *one, int flag)$/;"	f
CmpChar	DoubleLink.c	/^int CmpChar(const void *one, const void *two)$/;"	f
CmpInt	DoubleLink.c	/^int CmpInt(const void *one, const void *two)$/;"	f
CmpStr	DoubleLink.c	/^int CmpStr(const void *one, const void *two)$/;"	f
CreateList	DoubleLink.c	/^DLNode *CreateList()$/;"	f
DLNode	DoubleLink.c	/^}DLNode;$/;"	t	typeref:struct:_DoubleLink	file:
DLNode	DoubleLink.h	/^}DLNode;$/;"	t	typeref:struct:_DoubleLink
DeleteList	DoubleLink.c	/^void DeleteList(DLNode *List, void *data, int flag)$/;"	f
DropList	DoubleLink.c	/^void DropList(DLNode *List)$/;"	f
GetFileContent	DoubleLinkTest.c	/^DLNode *GetFileContent(DLNode *List_Content, char *filename)$/;"	f
InsertList	DoubleLink.c	/^void InsertList(DLNode *List, void *data)$/;"	f
MAX_LINE	DoubleLinkTest.c	19;"	d	file:
RM	Makefile	/^RM = rm -fr *.o *.a *.out$/;"	m
SearchList	DoubleLink.c	/^DLNode *SearchList(DLNode *List, void *data, int flag, int (*CallBackSearch)(void *, void *, int flag))$/;"	f
SequenceList	DoubleLink.c	/^DLNode *SequenceList(DLNode *List, int flag, int judge, int (*CallBackSequence)(DLNode *,DLNode *, DLNode *, int flag, int judge))$/;"	f
ShowList	DoubleLink.c	/^int ShowList(DLNode *List, int flag, int judge)$/;"	f
StatisticsContent	DoubleLinkTest.c	/^DLNode *StatisticsContent(DLNode *List_Content)$/;"	f
UpdateList	DoubleLink.c	/^void UpdateList(DLNode *List, void *data_search, void *data_change, int flag)$/;"	f
VS_StrLTrim	DoubleLinkTest.c	/^void VS_StrLTrim(char *pStr)  $/;"	f
VS_StrRTrim	DoubleLinkTest.c	/^void VS_StrRTrim(char *pStr)  $/;"	f
Wordnum	DoubleLinkTest.c	/^struct Wordnum{$/;"	s	file:
WriteFile	DoubleLinkTest.c	/^void WriteFile(char writestr[1000])$/;"	f
_DoubleLink	DoubleLink.c	/^typedef struct _DoubleLink$/;"	s	file:
_DoubleLink	DoubleLink.h	/^typedef struct _DoubleLink$/;"	s
__DOUBLELINK_H__	DoubleLink.h	13;"	d
back	DoubleLink.c	/^	struct _DoubleLink *back;  \/\/\/<双向链表的前区$/;"	m	struct:_DoubleLink	typeref:struct:_DoubleLink::_DoubleLink	file:
back	DoubleLink.h	/^	struct _DoubleLink *back;  \/\/\/<双向链表的前区$/;"	m	struct:_DoubleLink	typeref:struct:_DoubleLink::_DoubleLink
cmp	DoubleLink.c	/^int cmp(const void *a,const void *b)$/;"	f
data	DoubleLink.c	/^	void *data; \/\/\/<双向链表中的数据$/;"	m	struct:_DoubleLink	file:
data	DoubleLink.h	/^	void *data; \/\/\/<双向链表中的数据$/;"	m	struct:_DoubleLink
length	DoubleLinkTest.c	/^	int length;$/;"	m	struct:Wordnum	file:
main	DoubleLinkTest.c	/^int main( int argc, char *argv[] )$/;"	f
next	DoubleLink.c	/^	struct _DoubleLink *next;  \/\/\/<双向链表的后区$/;"	m	struct:_DoubleLink	typeref:struct:_DoubleLink::_DoubleLink	file:
next	DoubleLink.h	/^	struct _DoubleLink *next;  \/\/\/<双向链表的后区$/;"	m	struct:_DoubleLink	typeref:struct:_DoubleLink::_DoubleLink
num	DoubleLinkTest.c	/^	int num;	$/;"	m	struct:Wordnum	file:
word	DoubleLinkTest.c	/^	char *word;$/;"	m	struct:Wordnum	file:
